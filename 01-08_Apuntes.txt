"""Comentario creo Lenguaje de alto nivel, es mas sencillo, es como pseudocódigo en inglés. Es dinámico, no tengo que definir que tipo de variable su utiliza. 
Phyton tiene tipos de datos, solo se pueden cambiar. Es un lenguaje interpretado, no compilado. En c++ compilamos, en assembly tambien. 
Esto quiere decir que el archivo se procesa para generar un ejecutable, es una traducción al código de máquina y en ese proceso te corrige lo que está mal.
En phyton se ejecuta línea por línea, recién salta el error en el momento en que se está ejecutando, por eso es interpretado.
Se usa mucho para scripting, hacer una lista de pasos en vez que hacerlo yo de mientras programo otra cosa. 
Puede implementar cosas en c++.  Hay métodos, que es con un punto hacer una función. 
La agrupación se hace por indentación, no usa llaves. La variables en python no contienen los datos, sino que apuntan a los datos (es un puntero), por lo tanto cundo igualo, igualo punteros.
Si modifico uno u otro, se modifican ambos.

Interpretes: Jupyter, Spyder, Anaconda.

Editor de texto: overleaf

Type() ver que tipo de dato s la variable

dir() te permite ver las funciones relacionadas con el tipo de variable

**Datos:**

| tipo de dato | descripcion | ejemplo | data |
| --- | --- | --- | --- |
| string | cadenas de caracteres | “hola”; “hola”, | No funciona en ascii |
| Tuplas | es una secuencia de items ordenada e inmutable | (200,100,500) |  |
| Listas | Es una secuencia ordenada de elementos mutable | [200,100,5,4] |  |
| Diccionarios | Una colección no ordenada de valores, que son accedidos mediante una clave.  | diccionario: ‘Nombre:’ ’Carlos’} | Son como las estructucturas, se define una key, que es una string, a la cual se le asigna un valor. |
| Conjuntos/ Set y fozenset | Conjuntos matematicos | {a,b,c} |  |

**Operadores**

| Operador | Símbolo |
| --- | --- |
| Exponente | ** |
| Division entera | // |
| modulo | % (devuelve el resto de una división) |

**Precendencia**

1. Exponente **
2. Negación -
3. Multiplicación, division
4. Suma, resta

___________

22/08

For en C se usa para contar, aumentar un número, recorrer un vector o lista de elementos. En phyton es distinto.

For i in range (1,10) uno incluido, 10 no→ Range es una función de devuelve una lista de valores, itera sobre una secuencia de numeros, lo que genera progresiones aritmeticas. 

For palabra in palabras → llama a los elementos de la lista palabras como palabra, llamandolos mientras se itera la acción

No hay punteros en phyton, cuando cambio un valor y hago un puntero hacia el valor almacenado anteriormente, esté se actualizado y el valor anterior se pierde 

secuencia for

def cuadrado (n):
return n*n
print (+cuadrado(3))

//como intercalar un valor 
var=3
print(f”var vale:{var}”)
"""
